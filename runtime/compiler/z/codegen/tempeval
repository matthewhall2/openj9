TR::Register *J9::Z::TreeEvaluator::inlineCheckAssignableFromEvaluator(TR::Node *node, TR::CodeGenerator *cg)
   {
   TR::Register *fromClassReg = cg->evaluate(node->getFirstChild());
   TR::Register *toClassReg = cg->evaluate(node->getSecondChild());

   TR::Register *resultReg = cg->allocateRegister();
   TR::LabelSymbol *helperCallLabel = generateLabelSymbol(cg);
   TR::LabelSymbol *doneLabel = generateLabelSymbol(cg);

   TR::RegisterDependencyConditions* deps = new (cg->trHeapMemory()) TR::RegisterDependencyConditions(0, 3, cg);
   deps->addPostCondition(fromClassReg, TR::RealRegister::AssignAny);
   deps->addPostConditionIfNotAlreadyInserted(toClassReg, TR::RealRegister::AssignAny);
   deps->addPostCondition(resultReg, TR::RealRegister::AssignAny);

   /*
    * TODO: add inlined tests (SuperclassTest, etc) 
    * Inlined tests will be used when possible, or will jump to the OOL section
    * and perform the tests using the CHelper when not possible
   */

   // no need to check for null inline, NULLCHECK nodes are inserted during the inlined called recognition
   genInlineClassEqualityTest(node, cg, cg->comp(), toClassReg, fromClassReg, doneLabel);

   generateS390BranchInstruction(cg, TR::InstOpCode::BRC, TR::InstOpCode::COND_BRC, node, helperCallLabel);
   TR_S390OutOfLineCodeSection *outlinedSlowPath = new (cg->trHeapMemory()) TR_S390OutOfLineCodeSection(helperCallLabel, doneLabel, cg);
   cg->getS390OutOfLineCodeSectionList().push_front(outlinedSlowPath);
   outlinedSlowPath->swapInstructionListsWithCompilation();

   generateS390LabelInstruction(cg, TR::InstOpCode::label, node, helperCallLabel);
   resultReg = TR::TreeEvaluator::performCall(node, false, cg);

   generateS390BranchInstruction(cg, TR::InstOpCode::BRC, TR::InstOpCode::COND_BRC, node, doneLabel); // exit OOL section
   outlinedSlowPath->swapInstructionListsWithCompilation();

   generateS390LabelInstruction(cg, TR::InstOpCode::label, node, doneLabel, deps);
   node->setRegister(resultReg);

   return resultReg;
   }

   static void genInlineClassEqualityTest(TR::Node * node, TR::CodeGenerator * cg, TR::Compilation * comp, TR::Register * toClassReg, TR::Register * fromClassReg, TR::LabelSymbol * successLabel) {
   cg->generateDebugCounter(TR::DebugCounter::debugCounterName(comp, "checkCastStats/(%s)/Equal", comp->signature()),1,TR::DebugCounter::Undetermined);
   generateS390CompareAndBranchInstruction(cg, TR::InstOpCode::getCmpRegOpCode(), node, toClassReg, fromClassReg, TR::InstOpCode::COND_BE, successLabel, false, false);
   cg->generateDebugCounter(TR::DebugCounter::debugCounterName(comp, "checkCastStats/(%s)/EqualFail", comp->signature()),1,TR::DebugCounter::Undetermined);
}

               genInlineClassEqualityTest(node, cg, comp, castClassReg, objClassReg, doneLabel);
